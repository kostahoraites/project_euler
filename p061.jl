#=
Cyclical figurate numbers

Problem 61

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Square 	  	P4,n=n2 	  	1, 4, 9, 16, 25, ...
Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

    The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
    This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
=#


#=
approach:
1. make an array of all the 4-digit s-gonal numbers for each s
2. for each s-gonal number, make a list of all the (s+1)-gonal numbers that could be next in the "cyclic" list
3. traverse the graph until an ordered set is found
4. AND check whether the cycles of length 7 include all 6 n-gons in the problem
=#


include("utils/sgon.jl")   # general formula for sgonal numbers (triangle, square, etc.)

sides = [3,4,5,6,7,8] 

A = Array{Any}(nothing, 7)

function fourdigit_sgons(s)
    # find all four-digit s-gon numbers and return as a list
    sgon_list = []
    n = 1
    strnum = '1'
    while length(strnum) < 5
        num = sgon(s, n)
        strnum = string(num)
        if length(strnum)==4
            push!(sgon_list, num)
        end
        n = n+1
    end
    return sgon_list
end


# step 1. make an array of all the 4-digit s-gonal numbers for each s
for i=1:6
    A[i] = fourdigit_sgons(sides[i])    
end



# step 2. for each s-gonal number, make a list of all the t-gonal (where 3<= s,t <= 8) numbers that could be next in the "cyclic" list

# note: A is an array of arrays (the figurate numbers)
# so to keep track of all possible following numbers, B is an array of arrays of (2-element A index) arrays
# example:   A[1][2] = 1081 (a triangle number ENDING in 81), 
# julia> B[1][2]
# 4-element Array{Any,1}:
#  [1, 83]
#  [2, 59]
#  [3, 49]
#  [4, 42]
# note B[1][2][2] = [2, 59] and A[2][59]=8100 (i.e. a square number, 90^2, BEGINNING with 81)

B = Array{Any}(nothing, 6)
for i=1:6
    B[i] = Array{Any}(nothing, length(A[i]))
    for j=1:length(B[i])
        B[i][j] = []   # initialize adjacency list for number A[i][j]
        for k=1:6
            for l=1:length(A[k])
                if string(A[i][j])[3:4] == string(A[k][l])[1:2]
                    push!(B[i][j], [k, l])
                end
            end
        end
    end
end



# step 3. traverse the graph to find all cycles (length 7)
# step 4. AND check whether the cycles of length 7 include all 6 n-gons in the problem

# use a recursive function that appends 

#=
function traverse(head, c, A, B, i, j)
    # head: keep track of the top of the 
    # c: counter, for how deep in the tree
    # base case
    if (c==7)
    #if (c==7) | (length(B[c][j])==0)
        if A[i][j] == head
            println(A[i][j])
            return A[i][j]
        end
        return 0 # else
    end
        # .. (else)
    l = length(B[i][j])        
    #output = Array{Any}(nothing, l)
    if l >0
        for k=1:l
            B_ijk = B[i][j][k]
            #output[k] = [A[i][j]]
            #output[k] = push!([A[i][j]], A[B_ijk[1]][B_ijk[2]])
            #append!(output[k], traverse(A, B, B_ijk[1], B_ijk[2]) )
            test = traverse(head, A, B, B_ijk[1], B_ijk[2])
            if test != 0
                println(A[i][j])
                return A[i][j] + test
            end
        end
    end
    return 0
end
=#


function traverse(head, depth, A, B, i, j)
    # head: keep track of the top of the 
    # depth: counter, for how deep in the tree
    # A: numbers
    # B: adjacency graph
    # i, j: indices of A of the current number
    # conduct a depth first search and find cycles that loop back to head
    # base case
    maxdepth = 7
    output = []
    l = length(B[i][j])        
    if (depth == maxdepth)
    #if (c==7) | (length(B[c][j])==0)
        if l > 0
            for b=1:length(l)
                push!(output, [[i,j]])
            end
            return output
        end
        #if A[i][j] == head
        #    return [[[i, j]]]
        #end
        #return [[[0,0]]] # dummy ()
    end
        # .. (else)
    #output = Array{Any}(nothing, l)
    if l > 0
        for k=1:l
            #println('k', k)
            #output[k] = []
            B_ijk = B[i][j][k]
            test = traverse(head, depth+1, A, B, B_ijk[1], B_ijk[2])
            for m=1:length(test)
                #push!(output[k], append!([[i,j]], test[m]))
                push!(output, append!([[i,j]], test[m]))
                #println(A[i][j])
            end
        end
        return output
    end
    return [[[0,0]]]  # no adjacent nodes (l= 0)
end


function check_cycle(c)
    # see if the cycle c is legit (no repeats, all 6 sgons visited )
    gontypes = [0,0,0,0,0,0]
    for i=1:6
        gontypes[i] = c[i][1]
    end
    if length(Set(gontypes))==6
        return true
    else
        return false
    end
end


function sol(A, c)
    output = 0
    for i=1:6
        num = A[c[i][1]][c[i][2]]
        print(num, " ")
        output += num
    end
    return output
end


# Loop through the triangle numbers (A[1]), traverse graph (adjacency saved in B) for each, and find a sequence of length 6

i=1
maxdepth = 7
for j=1:length(A[1])
    t= traverse(A[i][j], 1, A, B, i, j)
    for ind=1:length(t)
        lt = length(t[ind])
        # find the cycles of length maxdepth
        if (t[ind][lt] == t[ind][1]) & (lt == maxdepth)
            if check_cycle(t[ind])==true
                answer = sol(A, t[ind])
                println("the solution is: $answer ")
            end
        end
    end
end



